---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sanitas_backend
Transform:
  - AWS::Serverless-2016-10-31
Parameters:
  PostgresURL:
    Type: String
    Default: "postgresql://backend:backend@hostpc:6969/sanitas"
    Description: "The Postgres DB URL to connect during lambdas execution"
    NoEcho: true
  CognitoUserPoolName:
    Type: String
    Default: SanitasCognitoUserPool
    Description: The user pool used to authenticate Sanitas users.
  CognitoUserPoolClientName:
    Type: String
    Default: SanitasCognitoUserPoolClient
    Description: The user pool client used to connect to the user pool
      in Sanitas.

# More info about Globals:
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs20.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 100
    Tracing: Active
    # You can add LoggingConfig parameters such as the
    # Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel.
    # Learn more here
    # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        POSTGRES_URL: !Ref PostgresURL
    Layers:
      - !Ref DBConnectionLayer
      - !Ref LambdaLoggingLayer
      - !Ref UtilsLayer
  Api:
    TracingEnabled: true
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,PUT'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  DBConnectionLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sanitas-db-connection-layer
      Description: Layer for connecting to the DB
      CompatibleRuntimes:
        - nodejs20.x
      ContentUri: layers/db-conn
    Metadata:
      BuildMethod: nodejs20.x
  LambdaLoggingLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sanitas-lambda-logging-layer
      Description: Layer for configuring the logging output of lambdas
      CompatibleRuntimes:
        - nodejs20.x
      ContentUri: layers/logging
    Metadata:
      BuildMethod: nodejs20.x
  UtilsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sanitas-lambda-utils-layer
      Description: Layer for sharing common utilities accross AWS lambdas
      CompatibleRuntimes:
        - nodejs20.x
      ContentUri: layers/utils/
    Metadata:
      BuildMethod: nodejs20.x
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code:
  # get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/GetAllItems/get-all-items.getAllItemsHandler
      Description: A simple example includes a HTTP get method.
      Environment:
        Variables:
          # Make table name accessible as environment variable from function
          # code during execution
          TEST_VAR: 1234
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  checkCuiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/CheckCui/check-cui.handler
      Description: Verifies if a CUI exists in the PostgreSQL database.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /check-cui/{cui}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code:
  # search-patient.js
  searchPatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/SearchPatient/search-patient.searchPatientHandler
      Description: >
        Searches for a patient in the database by Carnet, CÃ³digo de
        Trabajador, Nombre-Apellido or CUI.

      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SanitasAPI
            Path: /patient/search
            Method: POST
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code:
  # create-patient.mjs
  createPatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/CreatePatient/create-patient.createPatientHandler
      Description: Function to create a new patient
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient
            Method: POST
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code:
  # health-check.mjs
  healthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/HealthCheck/health-check.handler
      Description: Health check endpoint to verify the service status
      Events:
        Api:
          Type: Api
          Properties:
            Path: /health-check
            Method: GET
  # This is a Lambda function config associated with the source code:
  # health-check.mjs
  getPatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/GetGeneralPatientInfo/get-general-patient-info.handler
      Description: Gets the general information regarding a patient.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/general/{id}
            Method: GET
  # This is a Lambda function config associated with the source code:
  # update-patient.mjs
  updatePatientFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/UpdatePatient/update-patient.updatePatientHandler
      Description: Function to update patient data
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/general
            Method: PUT

  updateStudentInfoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ./src/handlers/UpdateStudentData/update-student-data.handler
      Description: Function to update student patient data
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/student
            Method: PUT

  # This is a Lambda function config associated with the source code:
  # update-patient.mjs
  updateCollaboratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/UpdateCollaborator/update-collaborator.updateCollaboratorHandler
      Description: Function to update collaborator data
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/collaborator
            Method: PUT
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code:
  # get-surgical-history-patient.mjs

  getSurgicalHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/GetSurgicalHistory/get-surgical-history-patient.getSurgicalHistoryHandler
      Description: Retrieves surgical history for a specific patient
        by ID.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/surgical-history/{id}
            Method: GET

  # This is a Lambda function config associated with the source code:
  # update-surgical-history.mjs
  updateSurgicalHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/UpdateSurgicalHistory/update-surgical-history-patient.updateSurgicalHistoryHandler
      Description: Updates the surgical history for a specific patient
        by ID.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/surgical-history
            Method: PUT

  # This is a Lambda function config associated with the source code:
  # get-family-history-patient.mjs
  getFamilyHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/GetFamilyHistory/get-family-history-patient.getFamilyHistoryHandler
      Description: Retrieves family history for a specific patient
        by ID.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/family-history/{id}
            Method: GET

  # This is a Lambda function config associated with the source code:
  # get-family-history-patient.mjs
  getPersonalHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: ./src/handlers/GetPersonalHistory/get-personal-history-patient.getPersonalHistoryHandler
      Description: Retrieves the personal history for a specific patient
        by ID.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/personal-history/{id}
            Method: GET

  # This is a Lambda function config associated with the source code:
  # update-family-history.mjs
  updateFamilyHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: ./src/handlers/UpdateFamilyHistory/update-family-history-patient.updateFamilyHistoryHandler
      Description: Updates the family history for a specific patient
        by ID.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/family-history
            Method: PUT

  # This is a Lambda function config associated with the source code:
  # update-family-history.mjs
  updatePersonalHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: ./src/handlers/UpdatePersonalHistory/update-personal-history-patient.updatePersonalHistoryHandler
      Description: Updates the personal history for a specific patient
        by ID.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/personal-history
            Method: PUT

  # This is a Lambda function config associated with the source code:
  # get-traumatological-history-patient.mjs

  getTraumatologicalHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/GetTraumatologicalHistory/get-traumatological-history-patient.getTraumatologicalHistoryHandler
      Description: Retrieves traumatological history for a specific
        patient by ID.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/traumatological-history/{id}
            Method: GET

  # This is a Lambda function config associated with the source code:
  # update-traumatological-history.mjs
  updateTraumatologicalHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/UpdateTraumatologicalHistory/update-traumatological-history-patient.updateTraumatologicalHistoryHandler
      Description: Updates the traumatological history for a specific
        patient by ID.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/traumatological-history
            Method: PUT

  # This is a Lambda function config associated with the source code:
  # get-patient.mjs
  getStudentFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/GetGeneralStudentInfo/get-general-student-info.handler
      Description: Gets the general information regarding a Student.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/student/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code:
  # get-collaborator.mjs
  getCollaboratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/GetGeneralCollaboratorInfo/get-collaborator.getCollaboratorHandler
      Description: Function to get collaborator data
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/collaborator/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code:
  # get-nonpatological-history-patient.mjs
  getNonPatologicalHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/GetNonPatologicalHistory/get-nonpatological-history-patient.getNonPatologicalHistoryHandler
      Description: Function to get non patological history data from.
        patient.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/nonpatological-history/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code:
  # update-nonpatological-history-patient.mjs
  updateNonPatologicalHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/UpdateNonPatologicalHistory/update-nonpatological-history-patient.updateNonPathologicalHistoryHandler
      Description: Function to put non patological history data from.
        patient.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/nonpatological-history
            Method: PUT
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # Esta es una configuraciÃ³n de Lambda function asociada con el cÃ³digo fuente:
  # update-allergic-history-patient.mjs
  updateAllergicHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/UpdateAllergicHistory/update-allergic-history-patient.updateAllergicHistoryHandler
      Description: Updates the allergic history for a specific patient
        by ID.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/allergic-history
            Method: PUT
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # Esta es una configuraciÃ³n de Lambda function asociada con el cÃÂ³digo fuente:
  # get-allergic-history-patient.mjs
  getAllergicHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      # yamllint disable-line rule:line-length
      Handler: src/handlers/GetAllergicHistory/get-allergic-history-patient.getAllergicHistoryHandler
      Description: Retrieves the allergic history for a specific patient
        by ID.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /patient/allergic-history/{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  SanitasAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Cors:
        AllowMethods: "'OPTIONS,POST,GET,PUT'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Doman: sanitas-uvg
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: false

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    # yamllint disable-line rule:line-length
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  SecureWebEndpoint:
    Description: Cognito secured API
    # yamllint disable-line rule:line-length
    Value: !Sub "https://${SanitasAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/"